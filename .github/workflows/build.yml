name: BUILD CI CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
           
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'yarn'
             
    - name: Install dependencies
      run: yarn install --frozen-lockfile
           
    - name: Lint
      run: yarn lint
         
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.10.0
      with:
        mongodb-version: '7.0'
        mongodb-replica-set: rs0
        mongodb-port: 27017

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Navegar al directorio del proyecto
          cd /home/inel/dev/project-cloud-service
          
          # Hacer pull de los últimos cambios
          git pull origin main
          
          # Detener y eliminar contenedor existente si está corriendo
          docker stop project-cloud-service || true
          docker rm project-cloud-service || true
          
          # Construir nueva imagen Docker
          docker build -t project-cloud-service:latest -f Dockerfile.prod .
          
          # Ejecutar el nuevo contenedor
          docker run -d \
            --name project-cloud-service \
            --restart unless-stopped \
            -p 3002:3002 \
            project-cloud-service:latest
          
          # Verificar que el contenedor esté corriendo
          sleep 10
          if docker ps | grep -q project-cloud-service; then
            echo "✅ Deployment successful! Container is running."
            docker ps | grep project-cloud-service
          else
            echo "❌ Deployment failed! Container is not running."
            docker logs project-cloud-service
            exit 1
          fi